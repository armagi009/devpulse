/**
 * API endpoint for managing user settings
 */

import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import { prisma } from '@/lib/db/prisma';
import { z } from 'zod';
import { DataPrivacySettings } from '@/lib/types/roles';

// Settings update schema
const settingsUpdateSchema = z.object({
  theme: z.enum(['system', 'light', 'dark']).optional(),
  emailNotifications: z.boolean().optional(),
  weeklyReports: z.boolean().optional(),
  burnoutAlerts: z.boolean().optional(),
  selectedRepositories: z.array(z.string().uuid()).optional(),
  dashboardLayout: z.record(z.string(), z.any()).optional(),
  dataPrivacy: z.enum([
    DataPrivacySettings.MINIMAL,
    DataPrivacySettings.STANDARD,
    DataPrivacySettings.DETAILED,
  ]).optional(),
});

/**
 * GET user settings
 */
export async function GET(
  req: NextRequest,
  { params }: { params: { userId: string } }
) {
  try {
    // Get the current session
    const session = await getServerSession(authOptions);
    
    // Check if user is authenticated
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    // Check if user is requesting their own settings or is an admin
    if (session.user.id !== params.userId && session.user.role !== 'ADMINISTRATOR') {
      return NextResponse.json(
        { error: 'Forbidden' },
        { status: 403 }
      );
    }
    
    // Get user settings
    const userSettings = await prisma.userSettings.findUnique({
      where: { userId: params.userId },
    });
    
    if (!userSettings) {
      return NextResponse.json(
        { error: 'User settings not found' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({ settings: userSettings });
  } catch (error) {
    console.error('Error fetching user settings:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

/**
 * PATCH user settings
 */
export async function PATCH(
  req: NextRequest,
  { params }: { params: { userId: string } }
) {
  try {
    // Get the current session
    const session = await getServerSession(authOptions);
    
    // Check if user is authenticated
    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    // Check if user is updating their own settings or is an admin
    if (session.user.id !== params.userId && session.user.role !== 'ADMINISTRATOR') {
      return NextResponse.json(
        { error: 'Forbidden' },
        { status: 403 }
      );
    }
    
    // Parse request body
    const body = await req.json();
    
    // Validate request body
    const validationResult = settingsUpdateSchema.safeParse(body);
    
    if (!validationResult.success) {
      return NextResponse.json(
        { error: 'Invalid request body', details: validationResult.error },
        { status: 400 }
      );
    }
    
    // Get validated data
    const validatedData = validationResult.data;
    
    // Update user settings
    const updatedSettings = await prisma.userSettings.upsert({
      where: { userId: params.userId },
      update: validatedData,
      create: {
        userId: params.userId,
        ...validatedData,
      },
    });
    
    // Log the action
    await prisma.auditLog.create({
      data: {
        action: 'USER_SETTINGS_UPDATE',
        entityType: 'USER',
        entityId: params.userId,
        description: 'User settings updated',
        userId: session.user.id,
        metadata: {
          updatedFields: Object.keys(validatedData),
        },
      },
    });
    
    return NextResponse.json({
      success: true,
      settings: updatedSettings,
    });
  } catch (error) {
    console.error('Error updating user settings:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}