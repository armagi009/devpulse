name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/devpulse_test
  NEXTAUTH_SECRET: test-secret-for-ci
  NEXTAUTH_URL: http://localhost:3000
  GITHUB_CLIENT_ID: test-client-id
  GITHUB_CLIENT_SECRET: test-client-secret

jobs:
  # Code Quality Checks
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: devpulse/package-lock.json
          
      - name: Install dependencies
        run: |
          cd devpulse
          npm ci
          
      - name: Run ESLint
        run: |
          cd devpulse
          npm run lint
          
      - name: Check TypeScript
        run: |
          cd devpulse
          npx tsc --noEmit
          
      - name: Verify Tailwind CSS
        run: |
          cd devpulse
          npm run verify:tailwind

  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: devpulse_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: devpulse/package-lock.json
          
      - name: Install dependencies
        run: |
          cd devpulse
          npm ci
          
      - name: Setup database
        run: |
          cd devpulse
          npx prisma generate
          npx prisma db push
          
      - name: Run unit tests
        run: |
          cd devpulse
          npm test -- --coverage --watchAll=false
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: devpulse/coverage
          fail_ci_if_error: false

  # Build Test
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: devpulse/package-lock.json
          
      - name: Install dependencies
        run: |
          cd devpulse
          npm ci
          
      - name: Generate Prisma client
        run: |
          cd devpulse
          npx prisma generate
          
      - name: Build application
        run: |
          cd devpulse
          npm run build
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: devpulse/.next
          retention-days: 1

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: devpulse_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: devpulse/package-lock.json
          
      - name: Install dependencies
        run: |
          cd devpulse
          npm ci
          
      - name: Install Playwright browsers
        run: |
          cd devpulse
          npx playwright install --with-deps
          
      - name: Setup database
        run: |
          cd devpulse
          npx prisma generate
          npx prisma db push
          npm run prepare:dry-run
          
      - name: Run E2E tests
        run: |
          cd devpulse
          npm run test:e2e
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            devpulse/e2e-tests/test-data/
            devpulse/playwright-report/
          retention-days: 7

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: devpulse/package-lock.json
          
      - name: Install dependencies
        run: |
          cd devpulse
          npm ci
          
      - name: Run security audit
        run: |
          cd devpulse
          npm audit --audit-level=moderate
          
      - name: Run dependency check
        run: |
          cd devpulse
          npx better-npm-audit audit --level moderate

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: devpulse_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: devpulse/package-lock.json
          
      - name: Install dependencies
        run: |
          cd devpulse
          npm ci
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: devpulse/.next
          
      - name: Setup database
        run: |
          cd devpulse
          npx prisma generate
          npx prisma db push
          npm run prepare:dry-run
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Run Lighthouse CI
        run: |
          cd devpulse
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Deployment Jobs
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: devpulse
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              per_page: 1
            });
            
            if (deployments.length > 0) {
              const deployment = deployments[0];
              const { data: statuses } = await github.rest.repos.listDeploymentStatuses({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.id
              });
              
              const successStatus = statuses.find(status => status.state === 'success');
              if (successStatus) {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `ðŸš€ Preview deployment is ready! 
                  
                  **Preview URL:** ${successStatus.target_url}
                  
                  This preview will be automatically updated when you push new commits to this PR.`
                });
              }
            }

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build, e2e-tests, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://devpulse.vercel.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: devpulse
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Notify deployment success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: 'https://devpulse.vercel.app',
              description: 'Production deployment successful',
              context: 'deployment/production'
            });