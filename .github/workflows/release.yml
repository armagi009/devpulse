name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: devpulse/package-lock.json
          
      - name: Install dependencies
        run: |
          cd devpulse
          npm ci
          
      - name: Run full test suite
        run: |
          cd devpulse
          npm test -- --coverage --watchAll=false
          npm run lint
          npm run build
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Generate changelog since last tag
          if [ -n "$LATEST_TAG" ]; then
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.version }}
          release_name: Release ${{ github.ref_name || github.event.inputs.version }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Deployment
            
            This release has been automatically deployed to production.
            
            **Production URL:** https://devpulse.vercel.app
            
            ## Testing
            
            - [x] All unit tests pass
            - [x] All integration tests pass
            - [x] All E2E tests pass
            - [x] Code quality checks pass
            - [x] Security audit passes
            
            ## Installation
            
            ```bash
            git clone https://github.com/your-org/devpulse.git
            cd devpulse/devpulse
            npm install
            npm run build
            npm start
            ```
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [create-release]
    environment:
      name: production
      url: https://devpulse.vercel.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: devpulse
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              target_url: 'https://devpulse.vercel.app',
              description: 'Release deployed successfully'
            });

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [deploy-release]
    if: always()
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#releases'
          text: |
            Release ${{ github.ref_name || github.event.inputs.version }} has been deployed!
            
            Status: ${{ job.status }}
            Production URL: https://devpulse.vercel.app
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}